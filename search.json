[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hiperGLM authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Example_Analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Example Analysis","text":"analysis, use one dataset TidyTuesday demonstrate functions package hiperGLM. dataset Broadway weekly grosses, including show titles, theaters, grosses, ticket prices, seat capacities number performances. want explore factors influence percent seats sold.","code":"data_url = \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-28/grosses.csv\" filepath =\"../data/grosses.csv\"  if (!dir.exists(\"../data\")) dir.create(\"../data\") if (!file.exists(filepath)) {     data = read.csv(data_url)     write.csv(data, file = filepath) }  data_raw = read.csv(filepath)"},{"path":"/articles/Example_Analysis.html","id":"data-processing","dir":"Articles","previous_headings":"","what":"2. Data Processing","title":"Example Analysis","text":"sake simplicity, look top ten biggest theaters (selected using current day seat numbers). define oversold variable standing tickets sold (seats sold percent greater 1), implies exceptionally successful week shows.","code":"data = data_raw %>%     select(week_ending, week_number, show, theatre, weekly_gross, avg_ticket_price, seats_in_theatre, pct_capacity) %>%     mutate(week_ending = ymd(week_ending))  theaters_seats = data %>%     group_by(theatre) %>%     summarise(seats = max(seats_in_theatre), date = max(week_ending)) %>%     arrange(desc(date), desc(seats))  data = data %>%     filter(theatre %in% theaters_seats$theatre[1:10])  data$pct_capacity = map_vec(data$pct_capacity, as.numeric) data$oversold = map_lgl(data$pct_capacity, function(x) x>1)"},{"path":"/articles/Example_Analysis.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"","what":"3. Exploratory Analysis","title":"Example Analysis","text":"","code":"data %>% ggplot(aes(x = week_ending, y = weekly_gross)) +     geom_line(size = 0.5, alpha = 0.5) +     geom_smooth() +     labs(x = \"Date\", y = \"Weekly Gross\", title = \"Trend of Weekly Gross\",          subtitle = \"Year: 1985-2020\", caption = \"Source: TidyTuesday, 2020.4.28\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' data %>%     group_by(theatre, week_number) %>%     summarise(avg_pct_capacity = mean(pct_capacity)) %>%     ggplot(aes(x = week_number, y = avg_pct_capacity)) +     geom_bar(stat = \"identity\") +     facet_wrap(.~theatre) +     labs(x = \"Week Number\", y = \"Seats Sold Percent\", title = \"Average Weekly Seats Sold Percent in One Year\",          subtitle = \"Averaged over years; stratified by theaters\", caption = \"Source: TidyTuesday, 2020.4.28\") #> `summarise()` has grouped output by 'theatre'. You can override using the #> `.groups` argument. data %>% ggplot(aes(x = avg_ticket_price)) +     geom_density(aes(fill = oversold), alpha = 0.5) +     labs(x = \"Average Ticket Price\", y = \"Density\", title = \"Densities of Average Ticket Prices\",          subtitle = \"Stratified by oversold or not\", caption = \"Source: TidyTuesday, 2020.4.28\")"},{"path":[]},{"path":"/articles/Example_Analysis.html","id":"linear-model","dir":"Articles","previous_headings":"4. Regression Analysis","what":"4.1 Linear model","title":"Example Analysis","text":"","code":"X = model.matrix(pct_capacity ~ week_ending + week_number + avg_ticket_price, data = data)  hglm_linear = hiper_glm(X, data$pct_capacity, model = \"linear\", option = list(mle_finder = \"pseudo_inv\")) coef(hglm_linear) #> [1]  8.448418e-01 -2.434307e-05 -2.150271e-05  4.263345e-03 summary(lm(pct_capacity ~ week_ending + week_number + avg_ticket_price, data = data)) #>  #> Call: #> lm(formula = pct_capacity ~ week_ending + week_number + avg_ticket_price,  #>     data = data) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.15262 -0.08106  0.02273  0.10804  0.88851  #>  #> Coefficients: #>                    Estimate Std. Error t value Pr(>|t|)     #> (Intercept)       8.448e-01  5.233e-03 161.449   <2e-16 *** #> week_ending      -2.434e-05  5.799e-07 -41.978   <2e-16 *** #> week_number      -2.150e-05  8.253e-05  -0.261    0.794     #> avg_ticket_price  4.263e-03  6.461e-05  65.988   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.1389 on 12353 degrees of freedom #> Multiple R-squared:  0.2742, Adjusted R-squared:  0.274  #> F-statistic:  1556 on 3 and 12353 DF,  p-value: < 2.2e-16"},{"path":"/articles/Example_Analysis.html","id":"logit-model","dir":"Articles","previous_headings":"4. Regression Analysis","what":"4.2 Logit model","title":"Example Analysis","text":"","code":"hglm_logit = hiper_glm(X, data$oversold, model = \"logit\", option = list(mle_finder = \"newton\")) coef(hglm_logit) #> [1]  0.3175848006 -0.0004899287 -0.0017693175  0.0468673263 summary(glm(oversold ~ week_ending + week_number + avg_ticket_price, family = \"binomial\", data = data)) #>  #> Call: #> glm(formula = oversold ~ week_ending + week_number + avg_ticket_price,  #>     family = \"binomial\", data = data) #>  #> Coefficients: #>                    Estimate Std. Error z value Pr(>|z|)     #> (Intercept)       0.3175848  0.1275498   2.490   0.0128 *   #> week_ending      -0.0004899  0.0000187 -26.205   <2e-16 *** #> week_number      -0.0017693  0.0020387  -0.868   0.3855     #> avg_ticket_price  0.0468673  0.0017670  26.524   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 8283.0  on 12356  degrees of freedom #> Residual deviance: 7331.4  on 12353  degrees of freedom #> AIC: 7339.4 #>  #> Number of Fisher Scoring iterations: 6"},{"path":"/articles/Example_Analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"5. Conclusion","title":"Example Analysis","text":"plots don’t see significant relations seats sold percent week number average ticket price. regression, however, week_ending(date) average ticket price significant explanatory variables: older show higher price, higher seats sold percent. resort lm glm p values inference implemented hiperGLM package.","code":""},{"path":"/articles/Example_Analysis.html","id":"functions-used","dir":"Articles","previous_headings":"","what":"6. Functions Used","title":"Example Analysis","text":"tidyverse: select, mutate, group_by, summarise, arrange, desc, filter lubridate: ymd purrr: map_vec, map_lgl ggplot2: geom_line, geom_smooth, geom_bar, geom_density, facet_wrap hiperGLM: hiper_glm, coef.hglm","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shengtao Wang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang S (2023). hiperGLM: High-performance generalized linear models (GLM) large data sets. R package version 0.0.0.9000.","code":"@Manual{,   title = {hiperGLM: High-performance generalized linear models (GLM) for large data sets},   author = {Shengtao Wang},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"hiperglm","dir":"","previous_headings":"","what":"High-performance generalized linear models (GLM) for large data sets","title":"High-performance generalized linear models (GLM) for large data sets","text":"hiperGLM high-performance GLM package fits linear generalized linear models large datasets. package created Shengtao Wang guidance Professor Akihiko Nishimura, part BSPH course PH.140.778, still progress. Link Github Repo: https://github.com/Wangst224/hiperGLM Link deployed website: List exported functions: 1. hiper_glm: model fitting function, return hglm object. 2. coef: extract coefficients hglm object. example: Website customization: 1. code chunk theme 2. code color 3. navigation bar layout 4. navigation bar GitHub icon 5. home page links","code":"hglm_linear = hiper_glm(X, y, model = \"linear\", option = list(mle_finder = \"pseudo_inv\")) coef(hglm_linear)"}]
